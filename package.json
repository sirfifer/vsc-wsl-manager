{
  "name": "vsc-wsl-manager",
  "displayName": "VSC WSL Manager",
  "description": "Comprehensive WSL distribution management for VS Code with security-first design",
  "version": "1.0.0",
  "publisher": "wsl-manager",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-username/vsc-wsl-manager"
  },
  "bugs": {
    "url": "https://github.com/your-username/vsc-wsl-manager/issues"
  },
  "homepage": "https://github.com/your-username/vsc-wsl-manager#readme",
  "license": "MIT",
  "icon": "resources/icon.png",
  "galleryBanner": {
    "color": "#0066CC",
    "theme": "dark"
  },
  "keywords": [
    "wsl",
    "windows subsystem for linux",
    "distribution",
    "manager",
    "terminal"
  ],
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Other",
    "Debuggers",
    "Programming Languages"
  ],
  "activationEvents": [
    "onView:wslDistributions",
    "onCommand:wsl-manager.refreshDistributions"
  ],
  "main": "./out/src/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "wsl-manager.refreshDistributions",
        "title": "WSL: Refresh Distributions",
        "icon": "$(refresh)"
      },
      {
        "command": "wsl-manager.downloadDistribution",
        "title": "WSL: Download Distribution",
        "icon": "$(cloud-download)"
      },
      {
        "command": "wsl-manager.createDistribution",
        "title": "WSL: Create Distribution from Image",
        "icon": "$(add)"
      },
      {
        "command": "wsl-manager.importDistribution",
        "title": "WSL: Import Distribution from TAR"
      },
      {
        "command": "wsl-manager.exportDistribution",
        "title": "WSL: Export Distribution to TAR"
      },
      {
        "command": "wsl-manager.createImage",
        "title": "WSL: Create Image from Distribution",
        "icon": "$(package)"
      },
      {
        "command": "wsl-manager.deleteDistribution",
        "title": "WSL: Delete Distribution",
        "icon": "$(trash)"
      },
      {
        "command": "wsl-manager.deleteImage",
        "title": "WSL: Delete Image",
        "icon": "$(trash)"
      },
      {
        "command": "wsl-manager.createImageFromDistribution",
        "title": "WSL: Create Image from Distribution",
        "icon": "$(add)"
      },
      {
        "command": "wsl-manager.createImageFromImage",
        "title": "WSL: Create Image from Existing Image",
        "icon": "$(expand-all)"
      },
      {
        "command": "wsl-manager.refreshImages",
        "title": "WSL: Refresh Images",
        "icon": "$(refresh)"
      },
      {
        "command": "wsl-manager.editImageProperties",
        "title": "WSL: Edit Image Properties",
        "icon": "$(edit)"
      },
      {
        "command": "wsl-manager.toggleImageEnabled",
        "title": "WSL: Toggle Image Enabled",
        "icon": "$(eye)"
      },
      {
        "command": "wsl-manager.showImageHelp",
        "title": "WSL: Learn about WSL Images"
      },
      {
        "command": "wsl-manager.showHelp",
        "title": "WSL: Learn about WSL"
      },
      {
        "command": "wsl-manager.openTerminal",
        "title": "WSL: Open Terminal",
        "icon": "$(terminal)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "wsl-manager",
          "title": "WSL Manager",
          "icon": "resources/wsl-icon.svg"
        }
      ]
    },
    "views": {
      "wsl-manager": [
        {
          "id": "wslImages",
          "name": "WSL Images",
          "icon": "$(package)",
          "contextualTitle": "WSL Images",
          "visibility": "visible"
        },
        {
          "id": "wslDistributions",
          "name": "WSL Distributions",
          "icon": "$(server)",
          "contextualTitle": "WSL Distributions",
          "visibility": "visible"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "wslImages",
        "contents": "No WSL images found.\n[$(add) Create Image from Distribution](command:wsl-manager.createImageFromDistribution)\n[$(expand-all) Create Image from Existing Image](command:wsl-manager.createImageFromImage)\n[Learn about WSL Images](command:wsl-manager.showImageHelp)"
      },
      {
        "view": "wslDistributions",
        "contents": "No WSL distributions found.\n[$(cloud-download) Download Distribution](command:wsl-manager.downloadDistribution)\n[$(folder-opened) Import from TAR](command:wsl-manager.importDistribution)\n[Learn about WSL](command:wsl-manager.showHelp)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "wsl-manager.createImageFromDistribution",
          "when": "view == wslImages",
          "group": "navigation@1",
          "icon": "$(add)"
        },
        {
          "command": "wsl-manager.createImageFromImage",
          "when": "view == wslImages",
          "group": "navigation@2",
          "icon": "$(expand-all)"
        },
        {
          "command": "wsl-manager.refreshImages",
          "when": "view == wslImages",
          "group": "navigation@3",
          "icon": "$(refresh)"
        },
        {
          "command": "wsl-manager.downloadDistribution",
          "when": "view == wslDistributions",
          "group": "navigation@1",
          "icon": "$(cloud-download)"
        },
        {
          "command": "wsl-manager.refreshDistributions",
          "when": "view == wslDistributions",
          "group": "navigation@2",
          "icon": "$(refresh)"
        }
      ],
      "view/item/context": [
        {
          "command": "wsl-manager.editImageProperties",
          "when": "view == wslImages && viewItem =~ /^image/",
          "group": "1_modify@1"
        },
        {
          "command": "wsl-manager.toggleImageEnabled",
          "when": "view == wslImages && viewItem =~ /^image/",
          "group": "1_modify@2"
        },
        {
          "command": "wsl-manager.deleteImage",
          "when": "view == wslImages && viewItem =~ /^image/",
          "group": "2_dangerous@1"
        },
        {
          "command": "wsl-manager.openTerminal",
          "when": "view == wslDistributions && viewItem == distribution",
          "group": "inline"
        },
        {
          "command": "wsl-manager.createImage",
          "when": "view == wslDistributions && viewItem == distribution"
        },
        {
          "command": "wsl-manager.exportDistribution",
          "when": "view == wslDistributions && viewItem == distribution"
        },
        {
          "command": "wsl-manager.deleteDistribution",
          "when": "view == wslDistributions && viewItem == distribution"
        }
      ]
    },
    "configuration": {
      "title": "WSL Manager",
      "properties": {
        "wsl-manager.defaultDistributionPath": {
          "type": "string",
          "default": "",
          "description": "Default path for storing WSL distributions"
        },
        "wsl-manager.autoRegisterProfiles": {
          "type": "boolean",
          "default": true,
          "description": "Automatically register WSL distributions as terminal profiles"
        },
        "wsl-manager.logging.level": {
          "type": "string",
          "enum": [
            "debug",
            "info",
            "warn",
            "error",
            "none"
          ],
          "default": "info",
          "description": "Logging level for WSL Manager"
        },
        "wsl-manager.logging.enableFileLogging": {
          "type": "boolean",
          "default": false,
          "description": "Enable logging to file"
        },
        "wsl-manager.logging.logDirectory": {
          "type": "string",
          "description": "Directory for log files (defaults to user data directory)"
        },
        "wsl-manager.security.restrictedOperations": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "create",
              "delete",
              "import",
              "export"
            ]
          },
          "default": [
            "delete"
          ],
          "description": "Operations that require user confirmation"
        },
        "wsl-manager.security.enableSecurityLogging": {
          "type": "boolean",
          "default": false,
          "description": "Enable security event logging"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "lint:fix": "eslint src --ext ts --fix",
    "test": "jest",
    "test:unit": "jest --testPathPattern=unit",
    "test:integration": "jest --testPathPattern=integration",
    "test:coverage": "jest --coverage",
    "test:watch": "jest --watch",
    "test:vscode": "node ./out/src/test/runTest.js",
    "automate": "npm run compile && node ./out/scripts/automate-testing.js",
    "fix-iteration": "npm run automate",
    "quick-test": "npm run compile && node ./out/scripts/quick-test.js",
    "test:watch:verbose": "jest --watch --verbose --detectOpenHandles",
    "test:debug": "node --inspect-brk ./node_modules/.bin/jest --runInBand",
    "test:performance": "jest --testNamePattern='performance' --verbose",
    "test:security": "jest --testPathPattern=security --verbose",
    "test:affected": "node scripts/test-affected.js",
    "test:e2e": "wdio run wdio.conf.ts",
    "test:e2e:debug": "wdio run wdio.conf.ts --logLevel=debug",
    "test:e2e:windows": "node scripts/run-wdio-windows.js",
    "test:e2e:windows:debug": "node scripts/run-wdio-windows.js --logLevel=debug",
    "test:e2e:python": "bash scripts/run-python-e2e.sh",
    "test:e2e:python:activation": "bash scripts/run-python-e2e.sh test_extension_activation",
    "test:e2e:python:commands": "bash scripts/run-python-e2e.sh test_commands",
    "test:e2e:python:install": "cmd.exe /c \"pip install -r test\\e2e-python\\requirements.txt\"",
    "test:e2e:python:clean": "rm -rf test/e2e-python/reports test/e2e-python/screenshots test/e2e-python/__pycache__",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e:windows",
    "test:complete": "node out/scripts/automation/complete-test-runner.js",
    "automate:full": "npm run compile && npm run test:complete",
    "dev": "concurrently -n \"compile,test\" -c \"blue,green\" \"npm run watch\" \"npm run test:watch:verbose\"",
    "dev:debug": "concurrently -n \"compile,logs\" -c \"blue,yellow\" \"npm run watch\" \"npm run logs:stream\"",
    "logs:stream": "node scripts/stream-logs.js",
    "logs:tail": "node scripts/tail-logs.js",
    "diagnostics": "node scripts/diagnostics.js",
    "perf:report": "node scripts/perf-report.js",
    "clean": "rimraf out *.log coverage .vscode-test",
    "clean:logs": "rimraf logs/*.log",
    "clean-build": "npm run clean && npm run compile",
    "validate": "node out/scripts/full-validation.js",
    "full-test": "npm run clean-build && npm run test && npm run validate",
    "precommit": "npm run full-test",
    "docs": "typedoc",
    "docs:watch": "typedoc --watch"
  },
  "devDependencies": {
    "@types/chai": "^5.2.2",
    "@types/glob": "^8.1.0",
    "@types/jest": "^29.5.11",
    "@types/mocha": "^10.0.10",
    "@types/node": "16.x",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.3.8",
    "@wdio/cli": "^9.19.2",
    "@wdio/devtools-service": "^8.42.0",
    "@wdio/globals": "^9.17.0",
    "@wdio/local-runner": "^9.19.2",
    "@wdio/mocha-framework": "^9.19.2",
    "@wdio/spec-reporter": "^9.19.2",
    "@wdio/types": "^9.19.2",
    "@wdio/visual-service": "^9.0.0",
    "chai": "^6.0.1",
    "chromedriver": "^128.0.3",
    "concurrently": "^8.2.2",
    "eslint": "^8.28.0",
    "jest": "^29.7.0",
    "mocha": "^11.7.2",
    "rimraf": "^5.0.5",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.2",
    "typedoc": "^0.25.13",
    "typedoc-plugin-markdown": "^3.17.1",
    "typescript": "^4.9.3",
    "wdio-vscode-service": "^6.1.3"
  },
  "dependencies": {
    "@types/uuid": "^10.0.0",
    "uuid": "^12.0.0"
  }
}
