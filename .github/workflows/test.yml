name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        vscode-version: [stable]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint
      continue-on-error: true  # Known timeout issues in some environments

    - name: Clean and Build extension
      run: |
        npm run clean
        npm run compile

    - name: Verify build output
      run: |
        if (!(Test-Path "out/src/extension.js")) {
          Write-Error "Build failed: extension.js not found"
          exit 1
        }
        Write-Host "Build successful: extension.js exists"

    - name: Run unit tests
      run: npm run test:unit
      timeout-minutes: 10

    - name: Run integration tests
      run: npm run test:integration
      timeout-minutes: 10

    - name: Run security tests
      run: npm run test:security
      timeout-minutes: 5

    - name: Run functional tests
      run: npx jest test/functional
      timeout-minutes: 5

    - name: Run validation tests
      run: npx jest test/validation
      timeout-minutes: 5

    - name: Run real output tests
      run: npx jest test/real-output-tests
      timeout-minutes: 5

    - name: Generate coverage report
      run: npm run test:coverage
      timeout-minutes: 15

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-${{ matrix.node-version }}
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Check coverage thresholds
      run: |
        if (Test-Path "coverage/coverage-summary.json") {
          $coverage = Get-Content ./coverage/coverage-summary.json | ConvertFrom-Json
          $lineCoverage = $coverage.total.lines.pct
          $branchCoverage = $coverage.total.branches.pct
          $functionCoverage = $coverage.total.functions.pct
          $statementCoverage = $coverage.total.statements.pct

          Write-Host "Coverage Report:"
          Write-Host "  Lines: $lineCoverage%"
          Write-Host "  Branches: $branchCoverage%"
          Write-Host "  Functions: $functionCoverage%"
          Write-Host "  Statements: $statementCoverage%"

          $failed = $false
          if ($lineCoverage -lt 80) {
            Write-Warning "Line coverage below 80% threshold: $lineCoverage%"
            $failed = $true
          }
          if ($branchCoverage -lt 80) {
            Write-Warning "Branch coverage below 80% threshold: $branchCoverage%"
            $failed = $true
          }
          if ($functionCoverage -lt 80) {
            Write-Warning "Function coverage below 80% threshold: $functionCoverage%"
            $failed = $true
          }
          if ($statementCoverage -lt 80) {
            Write-Warning "Statement coverage below 80% threshold: $statementCoverage%"
            $failed = $true
          }

          if ($failed) {
            Write-Error "Coverage thresholds not met"
            exit 1
          }

          Write-Host "All coverage thresholds met!"
        } else {
          Write-Warning "Coverage report not found"
        }

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-node${{ matrix.node-version }}-vscode${{ matrix.vscode-version }}
        path: |
          coverage/
          test-results/
          *.log

    - name: Security audit
      run: npm audit --production --audit-level=moderate
      continue-on-error: true

  e2e-tests:
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        npm ci
        npm run compile

    - name: Install Python E2E dependencies
      run: |
        pip install -r test/e2e-python/requirements.txt
      continue-on-error: true

    - name: Run Python E2E tests
      run: |
        python test/e2e-python/test_extension_activation.py
      timeout-minutes: 10
      continue-on-error: true

    - name: Upload E2E artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-artifacts
        path: |
          test/e2e-python/reports/
          test/e2e-python/screenshots/
          test-results/

  comprehensive-test:
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install and compile
      run: |
        npm ci
        npm run compile

    - name: Run comprehensive test suite
      run: npm run test:comprehensive
      timeout-minutes: 30

    - name: Run command tests
      run: npm run test:commands
      continue-on-error: true

    - name: Archive comprehensive results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-results
        path: |
          coverage/
          test-results/
          *.log

  test-summary:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: always()

    steps:
    - name: Test Summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ Unit/Integration tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit/Integration tests failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.e2e-tests.result }}" == "success" ] || [ "${{ needs.e2e-tests.result }}" == "skipped" ]; then
          echo "✅ E2E tests passed or skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ E2E tests had issues (non-blocking)" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Matrix Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- Node versions tested: 18.x, 20.x, 22.x" >> $GITHUB_STEP_SUMMARY
        echo "- VS Code version: stable" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Categories Run" >> $GITHUB_STEP_SUMMARY
        echo "- Unit tests" >> $GITHUB_STEP_SUMMARY
        echo "- Integration tests" >> $GITHUB_STEP_SUMMARY
        echo "- Security tests" >> $GITHUB_STEP_SUMMARY
        echo "- Functional tests" >> $GITHUB_STEP_SUMMARY
        echo "- Validation tests" >> $GITHUB_STEP_SUMMARY
        echo "- Real output tests" >> $GITHUB_STEP_SUMMARY
        echo "- E2E tests (when applicable)" >> $GITHUB_STEP_SUMMARY